AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Flask Application with rendering displaying a landing page including the server name
Parameters:
  # CfnKey:
  #   Type: String
  #   Description: CfnKey for S3 Bucket Access for CloudInit
  # SecretAccessKey:
  #   Type: String
  #   Description: SecretAccessKey for S3 Bucket Access for CloudInit
  # BucketName:
  #   Type: String
  #   Description: BucketName for S3 Bucket for CloudInit
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-50b4f047
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-002bf460
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-699ad409
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-f0e0a483
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-d9d62ab6
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-78ba6619
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-56e84c35
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-2589b946
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-f7354198
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 172.17.43.0/24
      EnableDnsSupport: True
      EnableDnsHostnames: True
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.0/26
      AvailabilityZone: "us-east-2c"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.64/26
      AvailabilityZone: "us-east-2a"
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref 'OperatorEMail'
        Protocol: email
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      # AvailabilityZones: !GetAZs !Ref AWS::Region
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
      NotificationConfigurations:
        - TopicARN: !Ref 'NotificationTopic'
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      # AWS::CloudFormation::Authentication:
      #   S3AccessCreds:
      #     type: S3
      #     accessKeyId: !Ref CfnKey
      #     secretKey: !Ref SecretAccessKey
      #     buckets: !Ref BucketName
      AWS::CloudFormation::Init:
        configSets: 
          default:
            - baseinstall
            - flaskpackage
            - confignginx
            - configuwsgi
        baseinstall:
          packages:
            yum:
              curl: []
              python36: []
              python36-devel: []
              gcc: []
              nginx: []
              python36-virtualenv: []
              strace: []
              screen: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - "\n"
                - - "[main]"
                  - !Sub "stack=${AWS::StackId}"
                  - !Sub "region=${AWS::Region}"
                  - ''
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - "\n"
                - - "[cfn-auto-reloader-hook]"
                  - "triggers=post.update"
                  - "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init"
                  - !Sub "action=/opt/aws/bin/cfn-init -v ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}"
                  - "runas=root"
                  - ''
          commands:
            01_installpip:
              command: curl https://bootstrap.pypa.io/get-pip.py | python3.6
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        flaskpackage:
          commands:
            02_createvirtualenv:
              cwd: /opt/onica-hello-world
              command: virtualenv-3.6 onica-hello-world
            03_installdepends:
              command: /opt/onica-hello-world/onica-hello-world/bin/pip install uwsgi flask
            04_fixperms:
              command: "chown -R nginx: /opt/onica-hello-world"
          files:
            /opt/onica-hello-world/templates/hello.html:
              owner: nginx
              group: nginx
              content: !Join
                - "\n"
                - - '<!doctype html>'
                  - "<title>Chill. Relax. I'm a Panda.</title>"
                  - '<center>'
                  - "<h1>Chill. Relax. I'm a Panda.</h1>"
                  - '<br />'
                  - '<img src="http://gallery.stoneydavis.com/panda.jpg">'
                  - '<br />'
                  - 'This software is running on the host: {{hostname}}'
                  - '<br />'
                  - '</center>'
                  - ''
            /opt/onica-hello-world/wsgi.py:
              owner: nginx
              group: nginx
              content: !Join
                - "\n"
                - - 'from onica import app as application'
                  - ''
                  - 'if __name__ == "__main__":'
                  - '    application.run()'
                  - ''
            /opt/onica-hello-world/onica.ini:
              owner: nginx
              group: nginx
              content: !Join
                - "\n"
                - - '[uwsgi]'
                  - 'module = wsgi'
                  - ''
                  - 'master = true'
                  - 'processes = 5'
                  - ''
                  - 'socket = /var/run/%n/onica.sock'
                  - 'chmod-socket = 660'
                  - 'vacuum = true'
                  - 'pidfile = /var/run/%n/onica.pid'
                  - ''
                  - 'die-on-term = true'
                  - 'workdir = /opt/onica-hello-world'
                  - 'processes = 4'
                  - 'threads = 2'
                  - 'daemonize = true'
                  - ''
            /opt/onica-hello-world/onica.py:
              owner: nginx
              group: nginx
              content: !Join
                - "\n"
                - - 'import socket'
                  - 'from flask import Flask'
                  - 'app = Flask(__name__)'
                  - ''
                  - 'from flask import render_template'
                  - 'from werkzeug.contrib.fixers import ProxyFix'
                  - 'app.wsgi_app = ProxyFix(app.wsgi_app)'
                  - ''
                  - '@app.route("/")'
                  - 'def hello(name=None):'
                  - '    return render_template("hello.html", hostname=socket.getfqdn())'
                  - ''
                  - 'if __name__ == "__main__":'
                  - '    app.run(host="0.0.0.0")'
                  - ''
        confignginx:
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
          files:
            /etc/nginx/nginx.conf:
              content: !Join
                - "\n"
                - - "user nginx;"
                  - "worker_processes auto;"
                  - "error_log /var/log/nginx/error.log;"
                  - "pid /run/nginx.pid;"
                  - ""
                  - "# Load dynamic modules. See /usr/share/nginx/README.dynamic."
                  - "include /usr/share/nginx/modules/*.conf;"
                  - ""
                  - "events {"
                  - "    worker_connections 1024;"
                  - "}"
                  - ""
                  - "http {"
                  - "    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '"
                  - "                      '$status $body_bytes_sent \"$http_referer\" '"
                  - "                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';"
                  - "    access_log  /var/log/nginx/access.log  main;"
                  - "    sendfile            on;"
                  - "    tcp_nopush          on;"
                  - "    tcp_nodelay         on;"
                  - "    keepalive_timeout   65;"
                  - "    types_hash_max_size 2048;"
                  - "    include             /etc/nginx/mime.types;"
                  - "    default_type        application/octet-stream;"
                  - "    # Load modular configuration files from the /etc/nginx/conf.d directory."
                  - "    # See http://nginx.org/en/docs/ngx_core_module.html#include"
                  - "    # for more information."
                  - "    include /etc/nginx/conf.d/*.conf;"
                  - "    server {"
                  - "        listen 80;"
                  - "        server_name _;"
                  - "        access_log  /var/log/nginx/access.log;"
                  - "        error_log  /var/log/nginx/error.log;"
                  - "        location / {"
                  - "            uwsgi_pass unix:/var/run/onica/onica.sock;"
                  - "            include uwsgi_params;"
                  - "            proxy_redirect     off;"
                  - "            proxy_set_header   Host                 $host;"
                  - "            proxy_set_header   X-Real-IP            $remote_addr;"
                  - "            proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;"
                  - "            proxy_set_header   X-Forwarded-Proto    $scheme;"
                  - "        }"
                  - "        include /etc/nginx/default.d/*.conf;"
                  - "    }"
                  - " }"
                  - ''
        configuwsgi:
          packages:
            yum:
              strace: []
          services:
            sysvinit:
              onica:
                enabled: true
                ensureRunning: true
                files: /opt/onica-hello-world/onica.ini
          commands:
            01_start:
              command: /etc/init.d/onica start
            02_start:
              command: strace -s 1000 -vv -tt -ff -o /tmp/onica.strace /etc/init.d/onica start
              # test: test "$(pgrep uwsgi | wc -l)" -ge 5
              ignoreErrors: true
          files:
            # /etc/systemd/system/onica.service:
            #   content: !Join
            #     - "\n"
            #     - - "[Unit]"
            #       - "Description=uWSGI Emperor"
            #       - "After=syslog.target"
            #       - "Requires=nginx"
            #       - "After=nginx.service"
            #       - ""
            #       - "[Service]"
            #       - "User=nginx"
            #       - "Group=nginx"
            #       - "ExecStart=/opt/onica-hello-world/onica-hello-world/bin/uwsgi --ini /opt/onica-hello-world/onica.ini"
            #       - "# Requires systemd version 211 or newer"
            #       - "RuntimeDirectory=onica"
            #       - "WorkingDirectory=/opt/onica-hello-world"
            #       - "Restart=always"
            #       - "KillSignal=SIGQUIT"
            #       - "Type=notify"
            #       - "StandardError=syslog"
            #       - "NotifyAccess=all"
            #       - ""
            #       - "[Install]"
            #       - "WantedBy=multi-user.target"
            #       - ''
            /etc/init.d/onica:
              mode: '000744'
              owner: root
              group: root
              content: !Join
                - "\n"
                - - '#!/usr/bin/env bash'
                  - ''
                  - '### BEGIN INIT INFO'
                  - '# Provides:          uwsgi-emperor'
                  - '# Required-Start:    $all'
                  - '# Required-Stop:     $all'
                  - '# Default-Start:     2 3 4 5'
                  - '# Default-Stop:      0 1 6'
                  - '# Short-Description: starts the uwsgi emperor app server'
                  - '# Description:       starts uwsgi emperor app server using start-stop-daemon'
                  - '### END INIT INFO'
                  - 'set -e'
                  - ''
                  - 'ulimit -a'
                  - 'PATH=/sbin:/bin:/usr/sbin:/usr/bin'
                  - 'DAEMON=/opt/onica-hello-world/onica-hello-world/bin/uwsgi'
                  - 'RUN_DIR=/var/run/onica'
                  - 'LOG_DIR=/var/log/onica'
                  - 'WORK_DIR=/opt/onica-hello-world'
                  - 'NAME=onica'
                  - 'DESC=onica'
                  - 'OWNER=nginx'
                  - 'GROUP=nginx'
                  - ''
                  - '[[ -x $DAEMON ]] || exit 0'
                  - '[[ -d $RUN_DIR ]] || mkdir $RUN_DIR && chown $OWNER:$GROUP $RUN_DIR'
                  - '[[ -d $LOG_DIR ]] || mkdir $LOG_DIR && chown $OWNER:$GROUP $LOG_DIR'
                  - ''
                  - 'do_pid_check()'
                  - '{'
                  - '    local PIDFILE=$1'
                  - '    [[ -f $PIDFILE ]] || return 0'
                  - '    local PID=$(cat $PIDFILE)'
                  - '    for p in $(pgrep $NAME); do'
                  - '        [[ $p == $PID ]] && return 1'
                  - '    done'
                  - '    return 0'
                  - '}'
                  - ''
                  - ''
                  - 'do_start()'
                  - '{'
                  - '    local PIDFILE=$RUN_DIR/$NAME.pid'
                  - '    local START_OPTS=" \'
                  - '        --ini /opt/onica-hello-world/onica.ini'
                  - '        --pidfile $PIDFILE \'
                  - '        --uid $OWNER \'
                  - '        --gid $GROUP \'
                  - '        --daemonize $LOG_DIR/onica.log"'
                  - '    if do_pid_check $PIDFILE; then'
                  - '        cd $WORK_DIR'
                  - '        $DAEMON $START_OPTS'
                  - '    else'
                  - '        echo "Already running!"'
                  - '    fi'
                  - '}'
                  - ''
                  - 'send_sig()'
                  - '{'
                  - '    local PIDFILE=$RUN_DIR/$NAME.pid'
                  - '    set +e'
                  - '    [[ -f $PIDFILE ]] && kill $1 $(cat $PIDFILE) > /dev/null 2>&1'
                  - '    set -e'
                  - '}'
                  - ''
                  - 'wait_and_clean_pidfile()'
                  - '{'
                  - '    local PIDFILE=$RUN_DIR/$NAME.pid'
                  - '    until do_pid_check $PIDFILE; do'
                  - '        echo -n "";'
                  - '    done'
                  - '    rm -f $PIDFILE'
                  - '}'
                  - ''
                  - 'do_stop()'
                  - '{'
                  - '    send_sig -3'
                  - '    wait_and_clean_pidfile'
                  - '}'
                  - ''
                  - 'do_reload()'
                  - '{'
                  - '    send_sig -1'
                  - '}'
                  - ''
                  - 'do_force_reload()'
                  - '{'
                  - '    send_sig -15'
                  - '}'
                  - ''
                  - 'get_status()'
                  - '{'
                  - '    echo Onica Status:'
                  - '    send_sig -10'
                  - '}'
                  - ''
                  - 'case "$1" in'
                  - '    start)'
                  - '        echo "Starting $DESC: "'
                  - '        do_start'
                  - '        echo "$NAME."'
                  - '        ;;'
                  - '    stop)'
                  - '        echo -n "Stopping $DESC: "'
                  - '        do_stop'
                  - '        echo "$NAME."'
                  - '        ;;'
                  - '    reload)'
                  - '        echo -n "Reloading $DESC: "'
                  - '        do_reload'
                  - '        echo "$NAME."'
                  - '        ;;'
                  - '    force-reload)'
                  - '        echo -n "Force-reloading $DESC: "'
                  - '        do_force_reload'
                  - '        echo "$NAME."'
                  - '       ;;'
                  - '    restart)'
                  - '        echo  "Restarting $DESC: "'
                  - '        do_stop'
                  - '        sleep 1'
                  - '        do_start'
                  - '        echo "$NAME."'
                  - '        ;;'
                  - '    status)'
                  - '        get_status'
                  - '        ;;'
                  - '    *)'
                  - '        N=/etc/init.d/$NAME'
                  - '        echo "Usage: $N {start|stop|restart|reload|force-reload|status}">&2'
                  - '        exit 1'
                  - '        ;;'
                  - 'esac'
                  - 'exit 0'
    Properties:
      AssociatePublicIpAddress: True
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      SecurityGroups: [!Ref 'InstanceSG']
      InstanceType: !Ref 'InstanceType'
      UserData: !Base64
        Fn::Join:
        - "\n"
        - - '#!/bin/bash -xe'
          - yum update -y aws-cfn-bootstrap
          - !Sub '/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}'
          - !Sub '/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}'
          - 'echo "Version 0.0.12'
          - ''
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: LessThanThreshold
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups: [!Ref ELBSG]
      Subnets: [!Ref PublicSubnetB, !Ref PublicSubnetA ]
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
  ELBIngresstoWebserver:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt InstanceSG.GroupId
      SourceSecurityGroupId: !GetAtt ELBSG.GroupId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
Outputs:
  URL:
    Description: The URL of the website
    Value: !Sub
      - 'http://${domain}'
      - { domain: !GetAtt ElasticLoadBalancer.DNSName }
