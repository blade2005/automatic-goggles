AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ServiceName:
      Type: String
      Default: ServerlessApp
      Description: Name for the service, used in the code repository, Lambda function, and pipeline names
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  # Code repository for the service
  CodeRepository:
      Type: AWS::CodeCommit::Repository
      Properties:
          RepositoryName: !Sub '${ServiceName}_repo'
          RepositoryDescription: !Sub 'Repository for the ${ServiceName} service'


  # CodeBuild project and resources (S3 Bucket for build artifacts, Role, Project)
  BuildArtifactsBucket:
      Type: AWS::S3::Bucket
  HelloWorldRoot:
      Type: AWS::S3::Bucket  
  CodeBuildServiceRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action: 
                    - 'sts:AssumeRole'
                  Effect: Allow
                  Principal:
                    Service:
                      - codebuild.amazonaws.com
          Path: /
          Policies:
              - PolicyName: CodeBuildAccess
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Resource:
                        - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ServiceName}_build'
                        - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ServiceName}_build:*'
                      Action:
                        - 'logs:CreateLogGroup'
                        - 'logs:CreateLogStream'
                        - 'logs:PutLogEvents'
                    - Effect: Allow
                      Resource:
                        - !Sub 'arn:aws:s3:::${BuildArtifactsBucket}/*'
                        - !Sub 'arn:aws:s3:::${HelloWorldRoot}/*'
                      Action: 
                        - 's3:GetObject'
                        - 's3:GetObjectVersion'
                        - 's3:PutObject'
  CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
          Name: !Sub '${ServiceName}_build'
          Description: Build project for the Lambda service
          Artifacts:
            Type: CODEPIPELINE
          Environment: 
              Type: LINUX_CONTAINER
              ComputeType: BUILD_GENERAL1_SMALL
              Image: aws/codebuild/python:2.7.12
              EnvironmentVariables:
                - Name: BUILD_OUTPUT_BUCKET
                  Value: !Ref BuildArtifactsBucket
                - Name: ROOTDIRBUCKET
                  Value: !Ref HelloWorldRoot
          ServiceRole: !GetAtt CodeBuildServiceRole.Arn
          Source: 
              Type: CODEPIPELINE
  CFNPipelinePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
          Description: CloudFormation Pipeline Execution Policy
          Path: "/"
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  Effect: Allow
                  Action: 
                      - 'cloudformation:CreateStack'
                      - 'cloudformation:DescribeStacks'
                      - 'cloudformation:DeleteStack'
                      - 'cloudformation:UpdateStack'
                      - 'cloudformation:CreateChangeSet'
                      - 'cloudformation:ExecuteChangeSet'
                      - 'cloudformation:DeleteChangeSet'
                      - 'cloudformation:DescribeChangeSet'
                      - 'cloudformation:SetStackPolicy'
                      - 'cloudformation:SetStackPolicy'
                      - 'cloudformation:ValidateTemplate'
                      - 'codebuild:StartBuild'
                      - 'codebuild:BatchGetBuilds'
                  Resource: "*"
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  PipelineExecutionRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action: 
                  - 'sts:AssumeRole'
                  Effect: Allow
                  Principal:
                    Service: 
                      - codepipeline.amazonaws.com
          Path: /
          ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/AWSCodeCommitFullAccess'
              - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
              - !Ref CFNPipelinePolicy
          Policies:
              - PolicyName: CodePipelineAccess
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                      - Action:
                          - 'iam:PassRole'
                          - 'lambda:InvokeFunction'
                          - 'lambda:ListFunctions'
                          - 'lambda:InvokeAsyc'
                        Effect: Allow
                        Resource: '*'
  Pipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
          ArtifactStore: 
              Location: !Ref BuildArtifactsBucket
              Type: S3
          Name: !Sub ${ServiceName}_pipeline
          RoleArn: !GetAtt PipelineExecutionRole.Arn
          Stages:
              - Name: Source
                Actions:
                  - Name: CodeCommitRepo
                    ActionTypeId:
                      Category: Source
                      Owner: AWS
                      Provider: CodeCommit
                      Version: 1
                    Configuration:
                      RepositoryName: !Sub '${ServiceName}_repo'
                      BranchName: master
                    OutputArtifacts:
                      - Name: SourceZip
                    RunOrder: 1
              - Name: Build
                Actions:
                  - Name: CodeBuild
                    ActionTypeId:
                      Category: Build
                      Owner: AWS
                      Provider: CodeBuild
                      Version: 1
                    Configuration:
                      ProjectName: !Ref CodeBuildProject
                    InputArtifacts:
                      - Name: SourceZip
                    OutputArtifacts:
                      - Name: BuiltZip
              - Name: Approach1
                Actions:
                  - Name: CreateChangeSet
                    ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: CloudFormation
                      Version: 1
                    Configuration:
                      ActionMode: CHANGE_SET_REPLACE
                      RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                      StackName: !Sub '${ServiceName}-Stack-Approach1'
                      ChangeSetName: !Sub '${ServiceName}-ChangeSet-Approach1'
                      TemplatePath: BuiltZip::approach1.yaml
                      Capabilities: CAPABILITY_IAM
                      ParameterOverrides: !Sub '{ "InstanceType": "${InstanceType}", "OperatorEMail": "${OperatorEMail}", "KeyName": "${KeyName}", "SSHLocation": "${SSHLocation}", "CfnKey": "${CfnKeys}", "SecretAccessKey": "${CfnKeys.SecretAccessKey}", "BucketName": "${HelloWorldRoot}" }'

                    InputArtifacts:
                      - Name: BuiltZip
                    RunOrder: 2
                  - Name: ExecuteChangeSet
                    ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: CloudFormation
                      Version: 1
                    Configuration:
                      ActionMode: CHANGE_SET_EXECUTE
                      RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                      StackName: !Sub '${ServiceName}-Stack-Approach1'
                      ChangeSetName: !Sub '${ServiceName}-ChangeSet-Approach1'
                    OutputArtifacts:
                      - Name: !Sub '${ServiceName}Approach1ChangeSet'
                    RunOrder: 3
              - Name: Approach2
                Actions:
                  - Name: CreateTestData
                    ActionTypeId:
                      Category: Invoke
                      Owner: AWS
                      Provider: Lambda
                      Version: 1
                    Configuration:
                      FunctionName: !Ref PopulateTestData
                      UserParameters: !Ref DynamoDBTable
                    RunOrder: 1
                  - Name: CreateChangeSet
                    ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: CloudFormation
                      Version: 1
                    Configuration:
                      ActionMode: CHANGE_SET_REPLACE
                      RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                      StackName: !Sub '${ServiceName}-Stack-Approach2'
                      ChangeSetName: !Sub '${ServiceName}-ChangeSet-Approach2'
                      TemplatePath: BuiltZip::app-sam.yaml
                      Capabilities: CAPABILITY_IAM
                    InputArtifacts:
                      - Name: BuiltZip
                    RunOrder: 2
                  - Name: ExecuteChangeSet
                    ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: CloudFormation
                      Version: 1
                    Configuration:
                      ActionMode: CHANGE_SET_EXECUTE
                      RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                      StackName: !Sub '${ServiceName}-Stack-Approach2'
                      ChangeSetName: !Sub '${ServiceName}-ChangeSet-Approach2'
                      ParameterOverrides: !Sub '{ "DDBTable": "${DynamoDBTable}", "DDBTableArn": "${DynamoDBTable.Arn}" }'
                    OutputArtifacts:
                      - Name: !Sub '${ServiceName}Approach2ChangeSet'
                    RunOrder: 3
  CfnUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - s3:GetObject
                Resource: "*"
  CfnKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CfnUser
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          Action:
            - s3:GetObject
          Effect: Allow
          Resource: !Sub "arn:aws:s3:::${HelloWorldRoot}/*"
          Principal:
            AWS: !GetAtt CfnUser.Arn
      Bucket: !Ref HelloWorldRoot
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"
      # TableName: "onica-test-data"
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: DynamoDBRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWriteItem
                - dynamodb:UpdateItem
                - dynamodb:PutItem
                Effect: Allow
                Resource: !GetAtt DynamoDBTable.Arn
        -
          PolicyName: BasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
        -
          PolicyName: PipelineRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'codepipeline:PutJobFailureResult'
              - 'codepipeline:PutJobSuccessResult'
              Resource: "*"
  PopulateTestData: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.main"
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          DDBTable: !Ref DynamoDBTable
      Code:
        ZipFile: >
          import boto3

          import boto3.dynamodb.types

          import uuid

          import json

          import logging

          import os

          FORMAT = '%(asctime)-15s %(levelname)s %(module)s.%(funcName)s %(message)s'

          DATEFMT = "%Y-%m-%d %H:%M:%S"

          logging.basicConfig(level=logging.INFO, format=FORMAT, datefmt=DATEFMT)

          LOGGER = logging.getLogger()

          LOGGER.setLevel(logging.INFO)


          def main(event, context):
              """Insert some test data into our dynamodb table."""
              job_id = event["CodePipeline.job"]["id"]
              cp = boto3.client("codepipeline")
              try:
                  test_data = [{"id": 1,  "details": {"firstName": "Malcolm", "lastName": "Reynolds"}}, {"id": 2,  "details": {"firstName": "Zoe", "lastName": "Washburne"}}, {"id": 3,  "details": {"firstName": "Hoban 'Wash'", "lastName": "Washburne"}}, {"id": 4,  "details": {"firstName": "Inara", "lastName": "Serra"}}, {"id": 5,  "details": {"firstName": "Jayne", "lastName": "Cobb"}}, {"id": 6,  "details": {"firstName": "Kaylee", "lastName": "Frye"}}, {"id": 7,  "details": {"firstName": "Simon", "lastName": "Tam"}}, {"id": 8,  "details": {"firstName": "River", "lastName": "Tam"}}, {"id": 8,  "details": {"firstName": "Derrial 'Shepherd'", "lastName": "Book"}}]
                  serializer = boto3.dynamodb.types.TypeSerializer()
                  table_name = event["CodePipeline.job"]["data"]["actionConfiguration"]["configuration"]["UserParameters"]
                  ddb = boto3.resource('dynamodb')
                  table = ddb.Table(table_name)
                  with table.batch_writer(["id",]) as batch:
                      for cast_member in test_data:
                          batch.put_item(cast_member)
                  _complete_job(cp, job_id)
              except Exception as error:
                  _fail_job(cp, job_id, error.__repr__())

          def _complete_job(cp, job_id):
              cp.put_job_success_result(jobId=job_id)

          def _fail_job(cp, job_id, failure_reason):
              cp.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          'type': 'JobFailed',
                          'message': failure_reason,
                          'externalExecutionId': uuid.uuid4().hex
                      }
                  )

      Runtime: "python3.6"
      Timeout: 120
