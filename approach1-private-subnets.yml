AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Flask Application with rendering displaying a landing page including the server name
Parameters:
  CfnKey:
    Type: String
    Description: CfnKey for S3 Bucket Access for CloudInit
  SecretAccessKey:
    Type: String
    Description: SecretAccessKey for S3 Bucket Access for CloudInit
  BucketName:
    Type: String
    Description: BucketName for S3 Bucket for CloudInit
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [c4.2xlarge, c4.4xlarge, c4.8xlarge, c4.large, c4.xlarge, cc2.8xlarge,
                    cr1.8xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge, d2.xlarge, hi1.4xlarge,
                    hs1.8xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, i2.xlarge, m4.10xlarge,
                    m4.2xlarge, m4.4xlarge, m4.large, m4.xlarge, r3.2xlarge, r3.4xlarge,
                    r3.8xlarge, r3.large, r3.xlarge, t2.large, t2.medium, t2.micro,
                    t2.nano, t2.small]
    ConstraintDescription: must be a valid EC2 instance type.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64:
        ami-0957b42d2e60d8654
    ap-northeast-2:
      HVM64:
        ami-0c5cc56ce20a39938
    ap-northeast-3:
      HVM64:
        ami-0c376da6d144c5890
    ap-south-1:
      HVM64:
        ami-0a6bfb6ec493fec48
    ap-southeast-1:
      HVM64:
        ami-00cc30e1735b3268b
    ap-southeast-2:
      HVM64:
        ami-0b1a7767bce29a01a
    ca-central-1:
      HVM64:
        ami-cd1b96a9
    cn-north-1:
      HVM64:
        ami-9906def4
    cn-northwest-1:
      HVM64:
        ami-bc6a7dde
    eu-central-1:
      HVM64:
        ami-0bfa8b98c4ff06eed
    eu-west-1:
      HVM64:
        ami-020d43be7e7841de4
    eu-west-2:
      HVM64:
        ami-8f7481e8
    eu-west-3:
      HVM64:
        ami-06879bb67c688e7eb
    sa-east-1:
      HVM64:
        ami-0f57b63a449295354
    us-east-1:
      HVM64:
        ami-00b94673edfccb7ca
    us-east-2:
      HVM64:
        ami-05ea59e90e2c10a56
    us-gov-west-1:
      HVM64:
        ami-ea7be78b
    us-west-1:
      HVM64:
        ami-02b2f7285ba6579ed
    us-west-2:
      HVM64:
        ami-99dafbe1

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 172.17.43.0/24
      EnableDnsSupport: True
      EnableDnsHostnames: True
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.0/26
      AvailabilityZone: "us-east-2c"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.64/26
      AvailabilityZone: "us-east-2a"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.128/26
      AvailabilityZone: "us-east-2c"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.17.43.192/26
      AvailabilityZone: "us-east-2a"
  EIPA:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
  NGWPrivateSubnetA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NGWPrivateSubnetA
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  EIPB:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
  NGWPrivateSubnetB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIPB.AllocationId
      SubnetId: !Ref PublicSubnetB
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteB:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NGWPrivateSubnetB
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref OperatorEMail
        Protocol: email

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PrivateSubnetA, !Ref PrivateSubnetB]
      # AvailabilityZones: !GetAZs !Ref AWS::Region
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          accessKeyId: !Ref CfnKey
          secretKey: !Ref SecretAccessKey
          buckets: !Ref BucketName
      AWS::CloudFormation::Init:
        configSets: 
          default:
            - baseinstall
        baseinstall:
          packages:
            yum:
              curl: []
              python3: []
              python3-pip: []
              python3-devel: []
              gcc: []
              strace: []
              screen: []
          sources:
              /: !Sub "https://s3.us-east-2.amazonaws.com/${BucketName}/onica-helloworld.tar.gz"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - "\n"
                - - "[main]"
                  - !Sub "stack=${AWS::StackId}"
                  - !Sub "region=${AWS::Region}"
                  - ''
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - "\n"
                - - "[cfn-auto-reloader-hook]"
                  - "triggers=post.update"
                  - "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init"
                  - !Sub "action=/opt/aws/bin/cfn-init -v ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}"
                  - "runas=root"
                  - ''
          commands:
            01_installextras:
              command: amazon-linux-extras install nginx1.12
            02_installvirtualenv:
              command: pip3.7 install virtualenv
            03_createvirtualenv:
              cwd: /opt/onica-hello-world
              command: /usr/local/bin/virtualenv onica-hello-world
            04_installdepends:
              command: /opt/onica-hello-world/onica-hello-world/bin/pip install uwsgi flask
            05_fixperms:
              command: "chown -R nginx: /opt/onica-hello-world"
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
              nginx:
                enabled: true
                ensureRunning: true
              onica:
                enabled: true
                ensureRunning: true
                files: /opt/onica-hello-world/onica.ini
    Properties:
      AssociatePublicIpAddress: False
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      SecurityGroups: [!Ref 'InstanceSG']
      InstanceType: !Ref 'InstanceType'
      UserData: !Base64
        Fn::Join:
        - "\n"
        - - '#!/bin/bash -xe'
          - yum update -y aws-cfn-bootstrap
          - !Sub '/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}'
          - !Sub '/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}'
          - 'echo "Version 0.1.2'
          - ''
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: LessThanThreshold
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: [!Ref ELBSG]
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
  ELBIngresstoWebserver:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt InstanceSG.GroupId
      SourceSecurityGroupId: !GetAtt ELBSG.GroupId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
Outputs:
  URL:
    Description: The URL of the website
    Value: !Sub
      - 'http://${domain}'
      - { domain: !GetAtt ApplicationLoadBalancer.DNSName }
